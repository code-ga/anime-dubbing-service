stages:
  - name: convert_mp4_to_wav
    module: convert.mp4_wav
    function: convert_mp4_to_wav
    inputs: []
    outputs: json
  - name: separate_audio
    module: convert.separate_audio
    function: separate
    inputs: [convert_mp4_to_wav]
    outputs: json
    condition: "not skip_audio_separation"
  - name: transcribe
    module: transcription.whisper
    function: transcript
    inputs: [separate_audio]
    outputs: json
  # Optional: emotion stage - enable via flag in main.py
  # - name: emotion
  #   module: transcription.emotion
  #   function: detect_emotions
  #   inputs: [transcribe]
  #   outputs: json
  - name: translate
    module: translate.openAi
    function: translate_with_openai
    inputs: [transcribe]  # or [emotion] if enabled
    outputs: json
  - name: build_refs
    module: tts.orchestrator
    function: build_speaker_refs
    inputs: [translate, separate_audio]
    outputs: json
    condition: "not transcription_only"
  - name: generate_tts
    module: tts.orchestrator
    function: generate_dubbed_segments
    inputs: [build_refs, translate, transcribe]
    outputs: json
    tts_method: "xtts"  # Options: "f5", "edge_tts", "xtts"
    condition: "not transcription_only"
  - name: mix_audio
    module: dub.mixer
    function: mix_audio
    inputs: [generate_tts, separate_audio, transcribe, translate]
    outputs: json
    condition: "not transcription_only"
  - name: mux_video
    module: main
    function: mux_video
    inputs: [mix_audio]
    outputs: json
    condition: "not transcription_only"
  - name: burn_subtitles
    module: utils.burn_subtitles
    function: burn_subtitles
    inputs: [translate]
    outputs: json
    condition: "transcription_only"